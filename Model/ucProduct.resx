<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="txtImage.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsN
        DhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQU
        FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCABuAIgDASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwC9rV5vvpEfGPz71gXkdxbsViwc9DUV5DObl5452kRx8qlfm6dD
        6Vl/bm1C1Dw+dFNG5Ku0gkilUEgjoCCPSvGufROi7tmr4e8STXl02m3LeXvzHx6nivkHQ7N9O+L1rbEY
        aHVfL49mPNfTl4iafa3WqXM6wNDG03Bx0BIH518ueD7h774kaZcyMXlkvhIXPcls1sv4c/RnDK3tI69T
        728D4NqUbkSLtYHuDxXzetkNL8SXtrnBguZIsfRiP8a+i/A7f6Od3ZT/ACrwf4oaLN4T8dX8zsywXjvc
        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
        UqM5xRXn8cxfAxgHnHYdKK91Xep+Xyjyux//2Q==
</value>
  </data>
</root>